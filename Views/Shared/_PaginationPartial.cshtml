@using JobExchangeMvc.DTOs
@model PagedResultDto<object>

@if (Model != null && Model.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Previous Button -->
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" href="@GetPageUrl(Model.CurrentPage - 1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo; Trước</span>
                </a>
            </li>

            <!-- Page Numbers -->
            @{
                var startPage = Math.Max(1, Model.CurrentPage - 2);
                var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);

                // First page
                if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(1)">1</a>
                    </li>
                    if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                // Page range
                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@GetPageUrl(i)">@i</a>
                    </li>
                }

                // Last page
                if (endPage < Model.TotalPages)
                {
                    if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(Model.TotalPages)">@Model.TotalPages</a>
                    </li>
                }
            }

            <!-- Next Button -->
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" href="@GetPageUrl(Model.CurrentPage + 1)" aria-label="Next">
                    <span aria-hidden="true">Sau &raquo;</span>
                </a>
            </li>
        </ul>
    </nav>

    <!-- Page Info -->
    <div class="text-center text-muted mt-2">
        <small>
            Hiển thị <strong>@((Model.CurrentPage - 1) * Model.PageSize + 1)</strong> 
            đến <strong>@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems)</strong> 
            trong tổng số <strong>@Model.TotalItems</strong> kết quả
        </small>
    </div>
}

@functions {
    private string GetPageUrl(int page)
    {
        var queryString = Context.Request.Query;
        var parameters = new Dictionary<string, string>();
        
        // Preserve all existing query parameters
        foreach (var key in queryString.Keys)
        {
            if (key != "page" && !string.IsNullOrEmpty(queryString[key]))
            {
                parameters[key] = queryString[key].ToString();
            }
        }
        
        // Add page parameter
        parameters["page"] = page.ToString();
        
        // Build URL
        var path = Context.Request.Path;
        var query = string.Join("&", parameters.Select(p => $"{p.Key}={Uri.EscapeDataString(p.Value)}"));
        return $"{path}?{query}";
    }
}
