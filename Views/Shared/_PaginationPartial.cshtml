@* 
    ✅ FIXED: Generic pagination partial - Accepts ANY PagedResultDto<T>
    Usage: @await Html.PartialAsync("_PaginationPartial", pagedResult)
*@
@using JobExchangeMvc.DTOs
@model dynamic

@{
    if (Model == null || Model.TotalPages <= 1)
    {
        return; // Don't show pagination for single page
    }
    
    int currentPage = Model.CurrentPage;
    int totalPages = Model.TotalPages;
    int pageSize = Model.PageSize;
    int totalItems = Model.TotalItems;
    bool hasPrevious = Model.HasPreviousPage;
    bool hasNext = Model.HasNextPage;
}

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <!-- Previous Button -->
        <li class="page-item @(hasPrevious ? "" : "disabled")">
            <a class="page-link" href="@GetPageUrl(currentPage - 1)" aria-label="Previous">
                <span aria-hidden="true">&laquo; Trước</span>
            </a>
        </li>

        <!-- Page Numbers -->
        @{
            var startPage = Math.Max(1, currentPage - 2);
            var endPage = Math.Min(totalPages, currentPage + 2);

            // First page
            if (startPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(1)">1</a>
                </li>
                if (startPage > 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            // Page range
            for (int i = startPage; i <= endPage; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="@GetPageUrl(i)">@i</a>
                </li>
            }

            // Last page
            if (endPage < totalPages)
            {
                if (endPage < totalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="@GetPageUrl(totalPages)">@totalPages</a>
                </li>
            }
        }

        <!-- Next Button -->
        <li class="page-item @(hasNext ? "" : "disabled")">
            <a class="page-link" href="@GetPageUrl(currentPage + 1)" aria-label="Next">
                <span aria-hidden="true">Sau &raquo;</span>
            </a>
        </li>
    </ul>
</nav>

<!-- Page Info -->
<div class="text-center text-muted mt-2">
    <small>
        Hiển thị <strong>@((currentPage - 1) * pageSize + 1)</strong> 
        đến <strong>@Math.Min(currentPage * pageSize, totalItems)</strong> 
        trong tổng số <strong>@totalItems</strong> kết quả
    </small>
</div>

@functions {
    private string GetPageUrl(int page)
    {
        var queryString = Context.Request.Query;
        var parameters = new Dictionary<string, string>();
        
        // Preserve all existing query parameters
        foreach (var key in queryString.Keys)
        {
            if (key != "page" && !string.IsNullOrEmpty(queryString[key]))
            {
                parameters[key] = queryString[key].ToString();
            }
        }
        
        // Add or update page parameter
        parameters["page"] = page.ToString();
        
        // Build query string
        var queryParams = string.Join("&", parameters.Select(p => $"{p.Key}={Uri.EscapeDataString(p.Value)}"));
        
        return $"{Context.Request.Path}?{queryParams}";
    }
}
